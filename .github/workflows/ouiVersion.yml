  name: Compare OUI Sniffer File Commit Dates (URLs)
 on:
   workflow_dispatch: # Allows manual triggering
   schedule:
     - cron: '0 * * * *'

 jobs:
   compare_files:
     runs-on: ubuntu-latest
     steps:
       - uses: actions/checkout@v3
         with:
           fetch-depth: 0 # Required for git log

       - name: Get File 1 Last Commit Date
         id: file1_date
         env:
           FILE_URL_1: "https://github.com/colonelpanichacks/Esp32-oui-sniffer/blob/Xiao-esp32-c3-serial/meshdetect.ino"
         run: |
           REPO_INFO=$(echo "$FILE_URL_1" | sed 's/https:\/\/github.com\/\(.*\)\/blob\/\(.*\)\/\(.*\)/\1 \2 \3/g')
           if [[ -z "$REPO_INFO" ]]; then
             echo "::set-output name=file1_status::Invalid URL"
             echo "::set-output name=file1_date::0"
             exit 1
           fi
           FILE_PATH=$(echo "$REPO_INFO" | awk '{print $3}')
           # Get the commit date using git log directly within the checked out repo:
           FILE1_COMMIT_DATE=$(git log -1 --format="%at" "$FILE_PATH")
           if [[ -z "$FILE1_COMMIT_DATE" ]]; then
             echo "::set-output name=file1_status::Not Found"
             echo "::set-output name=file1_date::0"
             echo "File 1 not found or git log error"
           else
             echo "::set-output name=file1_status::OK"
             echo "::set-output name=file1_date::$FILE1_COMMIT_DATE"
             echo "File 1 Commit Date: $(date -d @$FILE1_COMMIT_DATE)"
           fi

       - name: Get File 2 Last Commit Date
         id: file2_date
         env:
           FILE_URL_2: "https://github.com/lukeswitz/mesh-detect/blob/main/dist/oui-detection/meshdetect_privacy.bin"
         run: |
           REPO_INFO=$(echo "$FILE_URL_2" | sed 's/https:\/\/github.com\/\(.*\)\/blob\/\(.*\)\/\(.*\)/\1 \2 \3/g')
           if [[ -z "$REPO_INFO" ]]; then
             echo "::set-output name=file2_status::Invalid URL"
             echo "::set-output name=file2_date::0"
             exit 1
           fi
           FILE_PATH=$(echo "$REPO_INFO" | awk '{print $3}')
           # Get the commit date using git log directly within the checked out repo:
           FILE2_COMMIT_DATE=$(git log -1 --format="%at" "$FILE_PATH")
           if [[ -z "$FILE2_COMMIT_DATE" ]]; then
             echo "::set-output name=file2_status::Not Found"
             echo "::set-output name=file2_date::0"
             echo "File 2 not found or git log error"
           else
             echo "::set-output name=file2_status::OK"
             echo "::set-output name=file2_date::$FILE2_COMMIT_DATE"
             echo "File 2 Commit Date: $(date -d @$FILE2_COMMIT_DATE)"
           fi

       - name: Compare Dates and Set Status
         id: compare_dates
         run: |
           FILE1_STATUS="${{ steps.file1_date.outputs.file1_status }}"
           FILE2_STATUS="${{ steps.file2_date.outputs.file2_status }}"
           FILE1_DATE="${{ steps.file1_date.outputs.file1_date }}"
           FILE2_DATE="${{ steps.file2_date.outputs.file2_date }}"

           if [ "$FILE1_STATUS" == "Not Found" ] || [ "$FILE1_STATUS" == "Invalid URL" ] || [ "$FILE2_STATUS" == "Not Found" ] || [ "$FILE2_STATUS" == "Invalid URL" ]; then
             if [ "$FILE1_STATUS" == "Not Found" ] || [ "$FILE1_STATUS" == "Invalid URL" ] && [ "$FILE2_STATUS" == "Not Found" ] || [ "$FILE2_STATUS" == "Invalid URL" ]; then
               STATUS="Files Not Found"
               COLOR="gray"
             elif [ "$FILE1_STATUS" == "Not Found" ] || [ "$FILE1_STATUS" == "Invalid URL" ]; then
               STATUS="File 1 Not Found"
               COLOR="gray"
             else
               STATUS="File 2 Not Found"
               COLOR="gray"
             fi
           else
             if [ "$FILE1_DATE" -gt "$FILE2_DATE" ]; then
               STATUS="File 1 Newer"
               COLOR="green"
             elif [ "$FILE2_DATE" -gt "$FILE1_DATE" ]; then
               STATUS="File 2 Newer"
               COLOR="red"
             else
               STATUS="Files Same Age"
               COLOR="blue"
             fi
           fi

           echo "::set-output name=status::$STATUS"
           echo "::set-output name=color::$COLOR"
           echo "Comparison Status: $STATUS"
           echo "Color: $COLOR"

       - name: Output Status and Color
         run: |
           echo "Status: ${{ steps.compare_dates.outputs.status }}"
           echo "Color: ${{ steps.compare_dates.outputs.color }}"
